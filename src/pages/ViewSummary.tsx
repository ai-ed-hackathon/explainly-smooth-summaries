
import React, { useState, useEffect } from "react";
import DashboardHeader from "@/components/dashboard/DashboardHeader";
import Sidebar from "@/components/dashboard/Sidebar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Download, Share2, Upload } from "lucide-react";
import { useParams } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import UploadModal from "@/components/dashboard/UploadModal";
import { format } from "date-fns";

interface Transcript {
  id: string;
  title: string;
  content: string;
  file_path: string;
  created_at: string;
}

interface Summary {
  id: string;
  content: string;
}

interface KeyConcept {
  id: string;
  content: string;
}

interface QuizQuestion {
  id: string;
  question: string;
  correct_answer: string;
  incorrect_answers: string[];
}

const ViewSummary: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [transcript, setTranscript] = useState<Transcript | null>(null);
  const [summary, setSummary] = useState<Summary | null>(null);
  const [keyConcepts, setKeyConcepts] = useState<KeyConcept[]>([]);
  const [quizQuestions, setQuizQuestions] = useState<QuizQuestion[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploadModalOpen, setUploadModalOpen] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      if (!id) return;
      
      setLoading(true);
      try {
        // Fetch transcript
        const { data: transcriptData, error: transcriptError } = await supabase
          .from('transcripts')
          .select('*')
          .eq('id', id)
          .single();
          
        if (transcriptError) throw transcriptError;
        setTranscript(transcriptData);
        
        // Fetch summary
        const { data: summaryData, error: summaryError } = await supabase
          .from('summaries')
          .select('*')
          .eq('transcript_id', id)
          .single();
          
        if (!summaryError) {
          setSummary(summaryData);
          
          // If summary exists, fetch key concepts
          const { data: conceptsData, error: conceptsError } = await supabase
            .from('key_concepts')
            .select('*')
            .eq('summary_id', summaryData.id);
            
          if (!conceptsError) {
            setKeyConcepts(conceptsData || []);
          }
          
          // Fetch quiz questions
          const { data: quizData, error: quizError } = await supabase
            .from('quiz_questions')
            .select('*')
            .eq('summary_id', summaryData.id);
            
          if (!quizError) {
            setQuizQuestions(quizData || []);
          }
        } else {
          // We'll create a dummy summary when there's none yet
          // For a real app, we'd want to generate one with AI
          createDummySummary(transcriptData);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        toast.error("Failed to load summary");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  // This function simulates summary generation
  // In a real app, this would be done with an AI service
  const createDummySummary = async (transcript: Transcript) => {
    try {
      // Create dummy summary
      const { data: summaryData, error: summaryError } = await supabase
        .from('summaries')
        .insert({
          transcript_id: transcript.id,
          content: `This is an auto-generated summary of "${transcript.title}". In a real implementation, this would be generated by an AI model based on the transcript content.`,
        })
        .select()
        .single();
        
      if (summaryError) throw summaryError;
      setSummary(summaryData);
      
      // Create dummy key concepts
      await supabase
        .from('key_concepts')
        .insert([
          { summary_id: summaryData.id, content: "Key concept 1 from the transcript" },
          { summary_id: summaryData.id, content: "Key concept 2 from the transcript" },
          { summary_id: summaryData.id, content: "Key concept 3 from the transcript" },
        ]);
        
      // Create dummy quiz question
      await supabase
        .from('quiz_questions')
        .insert({
          summary_id: summaryData.id,
          question: "What is the main topic of this lecture?",
          correct_answer: "The main topic",
          incorrect_answers: ["Wrong answer 1", "Wrong answer 2", "Wrong answer 3"],
        });
        
      toast.success("Summary generated");
      
      // Refresh the data
      fetchData();
    } catch (error) {
      console.error('Error creating dummy data:', error);
      toast.error("Failed to generate summary");
    }
  };
  
  const fetchData = async () => {
    if (!id) return;
    
    try {
      // Fetch summary
      const { data: summaryData } = await supabase
        .from('summaries')
        .select('*')
        .eq('transcript_id', id)
        .single();
        
      if (summaryData) {
        setSummary(summaryData);
        
        // Fetch key concepts
        const { data: conceptsData } = await supabase
          .from('key_concepts')
          .select('*')
          .eq('summary_id', summaryData.id);
          
        setKeyConcepts(conceptsData || []);
        
        // Fetch quiz questions
        const { data: quizData } = await supabase
          .from('quiz_questions')
          .select('*')
          .eq('summary_id', summaryData.id);
          
        setQuizQuestions(quizData || []);
      }
    } catch (error) {
      console.error('Error refreshing data:', error);
    }
  };

  const handleDownload = async () => {
    if (!transcript) return;
    
    try {
      const { data, error } = await supabase.storage
        .from('transcript_files')
        .download(transcript.file_path);
        
      if (error) throw error;
      
      // Create a download link
      const url = URL.createObjectURL(data);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${transcript.title}.txt`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast.success("Transcript downloaded");
    } catch (error) {
      console.error('Download error:', error);
      toast.error("Failed to download transcript");
    }
  };

  const handleShare = () => {
    if (!transcript) return;
    
    // Copy current URL to clipboard
    navigator.clipboard.writeText(window.location.href)
      .then(() => toast.success("Link copied to clipboard"))
      .catch(() => toast.error("Failed to copy link"));
  };

  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMMM d, yyyy');
    } catch {
      return dateString;
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-explainly-light-gray">
      <DashboardHeader onUploadClick={() => setUploadModalOpen(true)} />
      
      <div className="flex-1 flex">
        <Sidebar />
        
        <div className="flex-1 p-6 overflow-y-auto">
          {loading ? (
            <div className="flex-1 flex items-center justify-center">
              <div className="animate-spin w-8 h-8 border-4 border-t-explainly-blue border-r-transparent border-b-explainly-blue border-l-transparent rounded-full"></div>
            </div>
          ) : transcript ? (
            <>
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h1 className="text-2xl font-bold">{transcript.title}</h1>
                  <p className="text-explainly-text-gray text-sm">
                    Added on {formatDate(transcript.created_at)}
                  </p>
                </div>
                <div className="flex items-center gap-3">
                  <Button variant="outline" size="sm" onClick={handleShare}>
                    <Share2 className="h-4 w-4 mr-2" />
                    Share
                  </Button>
                  <Button variant="outline" size="sm" onClick={handleDownload}>
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                </div>
              </div>

              <div className="grid gap-6">
                {/* Summary Card */}
                <Card>
                  <CardHeader>
                    <CardTitle>Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-explainly-text-gray whitespace-pre-line">
                      {summary?.content || "No summary available yet. Processing..."}
                    </p>
                  </CardContent>
                </Card>

                {/* Key Concepts Card */}
                <Card>
                  <CardHeader>
                    <CardTitle>Key Concepts</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {keyConcepts.length > 0 ? (
                      <ul className="list-disc pl-5 space-y-2 text-explainly-text-gray">
                        {keyConcepts.map((concept) => (
                          <li key={concept.id}>{concept.content}</li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-explainly-text-gray">
                        No key concepts available yet. Processing...
                      </p>
                    )}
                  </CardContent>
                </Card>

                {/* Quiz Questions Card */}
                {quizQuestions.length > 0 && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Quiz Questions</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-6">
                        {quizQuestions.map((quiz) => {
                          const allAnswers = [
                            quiz.correct_answer,
                            ...(typeof quiz.incorrect_answers === 'object' ? 
                              quiz.incorrect_answers : 
                              JSON.parse(quiz.incorrect_answers as unknown as string))
                          ].sort(() => Math.random() - 0.5);
                          
                          return (
                            <div key={quiz.id}>
                              <h3 className="font-medium mb-2">{quiz.question}</h3>
                              <div className="space-y-2">
                                {allAnswers.map((answer, index) => (
                                  <div key={index} className="flex items-start gap-2">
                                    <div className={`h-5 w-5 rounded-full border border-explainly-blue ${answer === quiz.correct_answer ? 'bg-explainly-blue' : ''} flex-shrink-0 mt-0.5`}></div>
                                    <p className={`text-sm ${answer === quiz.correct_answer ? 'font-medium' : ''}`}>
                                      {answer}
                                    </p>
                                  </div>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center">
                <h2 className="text-xl font-bold mb-2">Transcript not found</h2>
                <p className="text-explainly-text-gray mb-4">
                  The transcript you're looking for doesn't exist or you don't have access to it.
                </p>
                <Button 
                  className="explainly-gradient-bg"
                  onClick={() => setUploadModalOpen(true)}
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Upload a Transcript
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <UploadModal 
        open={uploadModalOpen} 
        onOpenChange={setUploadModalOpen} 
        onUploadSuccess={() => {}}
      />
    </div>
  );
};

export default ViewSummary;
