
  // This function simulates summary generation
  // In a real app, this would be done with an AI service
  const createDummySummary = async (transcript: Transcript) => {
    try {
      // Create dummy summary
      const { data: summaryData, error: summaryError } = await supabase
        .from('summaries')
        .insert({
          transcript_id: transcript.id,
          content: `This is an auto-generated summary of "${transcript.title}". In a real implementation, this would be generated by an AI model based on the transcript content.`,
        })
        .select()
        .single();
        
      if (summaryError) throw summaryError;
      setSummary(summaryData);
      
      // Create dummy exercises (previously key concepts)
      await supabase
        .from('key_concepts')
        .insert([
          { summary_id: summaryData.id, content: "Exercise 1: Explain the main principle discussed in the lecture" },
          { summary_id: summaryData.id, content: "Exercise 2: Compare and contrast two key ideas from the transcript" },
          { summary_id: summaryData.id, content: "Exercise 3: Apply the concepts to a real-world scenario" },
        ]);
        
      // Create dummy quiz question
      await supabase
        .from('quiz_questions')
        .insert({
          summary_id: summaryData.id,
          question: "What is the main topic of this lecture?",
          correct_answer: "The main topic",
          incorrect_answers: ["Wrong answer 1", "Wrong answer 2", "Wrong answer 3"],
        });
        
      toast.success("Summary generated");
      
      // Refresh the data
      fetchData();
    } catch (error) {
      console.error('Error creating dummy data:', error);
      toast.error("Failed to generate summary");
    }
  };
